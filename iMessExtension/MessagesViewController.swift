//
//  MessagesViewController.swift
//  iMessExtension
//
//  Created by Artem Olkov on 03/02/2017.
//  Copyright © 2017 Denis Kudinov. All rights reserved.
//

import UIKit
import Messages
import Photos
import RealmSwift

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        Realm.configureSharedStorageAsDefault()
    }
    
    lazy var vc : ViewController = {
        let vc = ViewController(frame: self.view.bounds)
        vc.delegate = self
        return vc
    }()

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        let vc = self.vc
        self.addChildViewController(vc)
        self.view.addSubview(vc.view)
        vc.didMove(toParentViewController: self)
    }
    
    lazy var button : UIButton = {
        let res = UIButton()

        res.setTitle("Testing", for: .normal)
        res.addTarget(self, action: #selector(buttonPressed), for: .touchUpInside)
        
        return res
    }()
    
    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
        var frame : CGRect = self.view.bounds
        if presentationStyle == .expanded {
            frame.origin.y += 120
            frame.size.height -= 60
        }
        print("VC SET - \(frame)")
        self.vc.view.frame = frame
    }

}

extension MessagesViewController: ViewControllerDelegate {
    
    func selected(_ photo: PhotoObject) {
        guard let conversation : MSConversation = self.activeConversation else {
            fatalError()
        }
        
        let layout = MSMessageTemplateLayout()
        let fetch = PHAsset.fetchAssets(withLocalIdentifiers: [photo.assetID!], options: nil)
        let asset = fetch.firstObject!
        let manager = PHImageManager.default()
        let option = PHImageRequestOptions()
        var image = UIImage()
        option.isSynchronous = true
        manager.requestImage(for: asset, targetSize:  CGSize(width: asset.pixelWidth, height: asset.pixelHeight), contentMode: .aspectFit, options: option, resultHandler: {(result, info)->Void in
            image = result!
        })
        
//            layout.imageTitle = photo.tags.first?.stringValue
//            layout.imageSubtitle = photo.tags[1].stringValue
            layout.caption = photo.tags.first?.stringValue
            layout.subcaption = photo.tags.last?.stringValue
        
        layout.trailingCaption = "Shared via Acronis™ True Image™"
        
        layout.image = image

        let message = MSMessage()
        message.layout = layout
        
        conversation.insert(message)
    }
    
}

extension MessagesViewController {
    
    func buttonPressed() throws {
        guard let conversation : MSConversation = self.activeConversation else {
            fatalError()
        }
        let url = URL(string: "https://pp.vk.me/c633525/v633525333/1ec7f/0xVbf6evIiw.jpg")!
        let data = try Data(contentsOf: url)
        
        let dir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first
        let path = dir?.appendingPathComponent("image.png")
        try? data.write(to: path!)
//        conversation.insertAttachment(path!, withAlternateFilename: "test")

        
        let layout = MSMessageTemplateLayout()
        layout.image = UIImage(data: data)
        layout.caption = "Acronis True Image"
        layout.imageTitle = "Hi"
        layout.imageSubtitle = "Ti Pidor"
        
        let message = MSMessage()
        message.layout = layout
        message.url = URL(string: "emptyURL")
        
        conversation.insert(message)
    }

}
